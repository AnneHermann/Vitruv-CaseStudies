import static tools.vitruv.applications.umljava.uml2java.UmlToJavaHelper.*
import static extension tools.vitruv.applications.umljava.util.java.JavaModifierUtil.*
import static extension tools.vitruv.applications.umljava.util.java.JavaContainerAndClassifierUtil.*
import static extension tools.vitruv.applications.umljava.util.UmlJavaTypePropagationHelper.*
import static tools.vitruv.domains.java.util.JavaPersistenceHelper.*
import static tools.vitruv.applications.umljava.util.uml.UmlClassifierAndPackageUtil.*
import tools.vitruv.framework.userinteraction.UserInteractionOptions.WindowModality
import tools.vitruv.framework.userinteraction.UserInteractionOptions.NotificationType
import org.eclipse.uml2.uml.UMLPackage
import tools.vitruv.framework.correspondence.CorrespondenceModelUtil
import org.eclipse.uml2.uml.Interface
import java.util.Optional

import "http://www.eclipse.org/uml2/5.0.0/UML" as uml
import "http://www.emftext.org/java" as java

reactions: umlToJavaClassifier
in reaction to changes in UML
execute actions in Java

//===========================================
//=========================================== Class
//===========================================


reaction UmlClassCreated {
    after element uml::Class created and inserted in uml::Package[packagedElement]
    call createJavaClass(newValue)

}

routine createJavaClass(uml::Classifier umlClassifier) {
	match{
        require absence of java::Class corresponding to umlClassifier // TODO existance check
        require absence of java::CompilationUnit corresponding to umlClassifier
	}
    action {
        val javaClassifier = create java::Class and initialize {
        	javaClassifier.name = umlClassifier.name;
        	javaClassifier.makePublic
        }
        call { 
        	createJavaCompilationUnit (umlClassifier, javaClassifier, umlClassifier.namespace)
        }
        add correspondence between umlClassifier and javaClassifier
    }
}

routine createJavaCompilationUnit(uml::Classifier umlClassifier, java::ConcreteClassifier jClassifier, uml::Namespace uNamespace) {
	match {
	    val jPackage = retrieve optional java::Package corresponding to uNamespace
        require absence of java::CompilationUnit corresponding to umlClassifier // TODO existance check
	}
	
	action {
		val javaCompilationUnit = create java::CompilationUnit and initialize {
			if (jPackage.present) {
				javaCompilationUnit.namespaces += jPackage.get.javaPackageAsStringList
			}
            javaCompilationUnit.name = jClassifier.name + ".java";
            javaCompilationUnit.classifiers += jClassifier;
            persistProjectRelative(umlClassifier, javaCompilationUnit, buildJavaFilePath(javaCompilationUnit));
        }
        call {
            if (jPackage.present) {
                jPackage.get.compilationUnits += javaCompilationUnit
            }
        }
        add correspondence between umlClassifier and javaCompilationUnit
	}
}

reaction UmlClassifierRenamed {
    after attribute replaced at uml::Classifier[name]
    call renameJavaClassifier(affectedEObject)
}

routine renameJavaClassifier(uml::Classifier umlClassifier) {
    match {
        val javaClassifier = retrieve java::ConcreteClassifier corresponding to umlClassifier
        val javaCompilationUnit = retrieve java::CompilationUnit corresponding to umlClassifier
    }
    action {
        update javaClassifier {
            javaClassifier.name = umlClassifier.name;
        }
        update javaCompilationUnit {
            javaCompilationUnit.name = umlClassifier.name + ".java";
            persistProjectRelative(umlClassifier, javaCompilationUnit, buildJavaFilePath(javaCompilationUnit));
        }
    }
}

reaction UmlClassifierDeleted {
    after element uml::Classifier deleted and removed from uml::Package[packagedElement]
    call deleteJavaClass(oldValue)
}

routine deleteJavaClass(uml::Classifier umlClassifer) {
    match {
        val javaClassifier = retrieve java::ConcreteClassifier corresponding to umlClassifer
        val javaCompilationUnit = retrieve java::CompilationUnit corresponding to umlClassifer
    }
    action {
        delete javaClassifier
        delete javaCompilationUnit
    }
}

reaction UmlClassMadeFinal {
    after attribute replaced at uml::Class[isFinalSpecialization] 
    call setJavaClassFinal(affectedEObject)
}

routine setJavaClassFinal(uml::Class umlClass) {
    match {
        val jClass = retrieve java::Class corresponding to umlClass
    }
    action {
        update jClass {
            jClass.final = umlClass.finalSpecialization
        }
    }
}

reaction UmlClassMadeAbstract {
    after attribute replaced at uml::Class[isAbstract]
    call setJavaClassAbstract(affectedEObject)
}

routine setJavaClassAbstract(uml::Class umlClass) {
    match {
        val jClass = retrieve java::Class corresponding to umlClass
    }
    action {
        update jClass {
            jClass.abstract = umlClass.abstract
        }
    }
}

//reaction UmlSuperClassChanged {
//    after element uml::Generalization inserted in uml::Class[generalization]
//    call {
//    	changeJavaSuperClass(newValue.general as org.eclipse.uml2.uml.Class, affectedEObject)
//    }
//}
//
//routine changeJavaSuperClass(uml::Class superUMLClass, uml::Class uClass) {
//    match {
//        val jClass = retrieve java::Class corresponding to uClass
//        val superJavaClass = retrieve java::Class corresponding to superUMLClass
//    }
//    action {
//        call {
//            if (uClass.generals.size == 1) {
//                jClass.extends = createTypeReferenceAndUpdateImport(null, superJavaClass, jClass.containingCompilationUnit, userInteractor);
//            } else {
//                userInteractor.notificationDialogBuilder.message("Can not synchronize multiple inheritance for " + uClass)
//                    .title("Warning").notificationType(NotificationType.WARNING).windowModality(WindowModality.MODAL)
//                    .startInteraction()
//                logger.warn("Routine not executed: Tried to set multiple inheritance for " + uClass)
//            }
//        }
//    }
//}
//
//reaction UmlSuperClassDeleted {
//    after element uml::Generalization removed from uml::Class[generalization]
//    call deleteJavaSuperClass(affectedEObject)
//}
//
//routine deleteJavaSuperClass(uml::Class uClass) {
//    match {
//        val jClass = retrieve java::Class corresponding to uClass
//    }
//    action {
//        update jClass {
//            jClass.extends = null;
//        }
//    }
//}

// TODO uml superclass propagation changed
reaction UmlSuperClassAdded {
    after element uml::Generalization inserted in uml::Class[generalization]
    call addJavaSuperClass(affectedEObject, newValue)
}

routine addJavaSuperClass(uml::Class uClass, uml::Generalization uGeneralization) {
    match {
        val jClass = retrieve java::Class corresponding to uClass
        val jSuperClass = retrieve java::Class corresponding to uGeneralization.general
        require absence of java::TypeReference corresponding to uGeneralization
    }
    action {
        execute {
        	if (uClass.generals.size == 1) {
//	            val jReference = createTypeReferenceAndUpdateImport(null, jSuperClass, jClass.containingCompilationUnit, userInteractor)
        		// type propagation changed
	            var typeReference = createTypeReference(uGeneralization.general as org.eclipse.uml2.uml.Class, Optional.of(jSuperClass), null, userInteractor)
	            addJavaImport(jClass.containingCompilationUnit, typeReference)
	            jClass.extends = typeReference
	            addGeneralizationCorrespondence(uGeneralization, typeReference)
            } else {
                userInteractor.notificationDialogBuilder.message("Can not synchronize multiple inheritance for " + uClass)
                    .title("Warning").notificationType(NotificationType.WARNING).windowModality(WindowModality.MODAL)
                    .startInteraction()
                logger.warn("Routine not executed: Tried to set multiple inheritance for " + uClass)
            }
        }
    }
}

reaction UmlSuperClassDeleted {
    after element uml::Generalization removed from uml::Interface[generalization]
    call deleteJavaSuperClass(oldValue)
}

routine deleteJavaSuperClass(uml::Generalization uGeneralization) {
    match {
        val jReference = retrieve java::TypeReference corresponding to uGeneralization
    }
    action {
        delete jReference
    }
}

reaction UmlSuperClassReplaced{
	after element uml::Class replaced at uml::Generalization[general]
	with {affectedEObject.specific !== null && affectedEObject.specific instanceof org.eclipse.uml2.uml.Class}
	call {
		deleteJavaSuperClass(affectedEObject)
		addJavaSuperClass(affectedEObject.specific as org.eclipse.uml2.uml.Class, affectedEObject)
	}
}

//reaction UmlInterfaceImplementerChanged {
//	after element uml::Class replaced at uml::InterfaceRealization[implementingClassifier]
//	call {
//		deleteJavaImplementedInterface(affectedEObject.suppliers.head as org.eclipse.uml2.uml.Interface, oldValue)
//		changeJavaImplementedInterface(affectedEObject.suppliers.head as org.eclipse.uml2.uml.Interface, null, newValue)
//	}
//}
//
//reaction UmlImplementedInterfaceChanged {
//    after element uml::Interface inserted in uml::InterfaceRealization[supplier]
//    call changeJavaImplementedInterface(newValue, null, affectedEObject.eContainer as org.eclipse.uml2.uml.Class)
//
//}
//
//routine changeJavaImplementedInterface(uml::Interface uInterface, uml::Interface oldInterface, uml::Class uClass) {
//    match {
//        val jClass = retrieve java::Class corresponding to uClass
//        val jInterface = retrieve java::Interface corresponding to uInterface
//    }
//    action {
//    	call {
//            if (oldInterface !== null) {
//        		deleteJavaImplementedInterface(oldInterface, uClass)
//        	}
//        }
//        update jClass {
//            jClass.implements += createTypeReferenceAndUpdateImport(null, jInterface, jClass.containingCompilationUnit, userInteractor)
//        }
//    }
//}
//
//reaction UmlImplementedInterfaceDeleted {
//    after element uml::InterfaceRealization removed from uml::Class[interfaceRealization]
//    call deleteJavaImplementedInterface(oldValue.suppliers.head as org.eclipse.uml2.uml.Interface , affectedEObject)
//}
//
//routine deleteJavaImplementedInterface(uml::Interface uInterface, uml::Class uClass) {
//    match {
//        val jClass = retrieve java::Class corresponding to uClass
//        val jInterface = retrieve java::Interface corresponding to uInterface
//    }
//    action {
//        update jClass {
//            removeClassifierFromIterator(jClass.implements.iterator, jInterface) 
//        }
//    }
//}

// TODO uml interface implemented propagation changed
reaction UmlInterfaceRealizationCreated {
	after element uml::InterfaceRealization inserted in uml::Class[interfaceRealization]
	call createJavaClassImplementsReference(newValue, affectedEObject)
}

routine createJavaClassImplementsReference(uml::InterfaceRealization uRealization, uml::Class uClass){
	match {
		val jClass = retrieve java::Class corresponding to uClass
		val jInterface = retrieve java::Interface corresponding to uRealization.contract
		require absence of java::TypeReference corresponding to uRealization
	}
	action {
		execute {
//			val jReference = createTypeReferenceAndUpdateImport(null, jInterface, jClass.containingCompilationUnit, userInteractor)
    		// type propagation changed
            var typeReference = createTypeReference(uRealization.contract, Optional.of(jInterface), null, userInteractor)
            addJavaImport(jClass.containingCompilationUnit, typeReference)
            jClass.implements += typeReference
            addImplementsCorrespondence(uRealization, typeReference)
        }
	}
}

routine addImplementsCorrespondence(uml::InterfaceRealization uRealization, java::TypeReference jReference){
	match {
		require absence of java::TypeReference corresponding to uRealization
	}
	action {
		add correspondence between uRealization and jReference
	}
}

reaction UmlInterfaceRealizationRemoved {
	after element uml::InterfaceRealization removed from uml::Class[interfaceRealization]
	call deleteJavaClassImplementsReference(oldValue, affectedEObject)
}

routine deleteJavaClassImplementsReference(uml::InterfaceRealization uRealization, uml::Class uClass){
	match {
		val jClass = retrieve java::Class corresponding to uClass
		val jReference = retrieve java::TypeReference corresponding to uRealization
	}
	action {
		update uRealization {
			uRealization.clients -= uClass
		}
        delete jReference
	}
}

reaction UmlInterfaceRealizationReplaced {
	after element replaced at uml::InterfaceRealization[contract]
	with {oldValue !== null  && affectedEObject.implementingClassifier instanceof org.eclipse.uml2.uml.Class}
	call replaceJavaClassImplementsReference(affectedEObject, affectedEObject.implementingClassifier as org.eclipse.uml2.uml.Class)
}

routine replaceJavaClassImplementsReference(uml::InterfaceRealization uRealization, uml::Class uClass){
	action {
       call deleteJavaClassImplementsReference(uRealization, uClass)
       call createJavaClassImplementsReference(uRealization, uClass)
	}
}


reaction UmlDataTypeCreated {
    after element uml::DataType created and inserted in uml::Package[packagedElement] with !(newValue instanceof org.eclipse.uml2.uml.PrimitiveType)
    && !(newValue instanceof org.eclipse.uml2.uml.Enumeration) 
    call createJavaClass(newValue)
}

//===========================================
//=========================================== Interface
//===========================================


reaction UmlInterfaceCreated {
    after element uml::Interface created and inserted in uml::Package[packagedElement]
    call createJavaInterface(newValue)
}

routine createJavaInterface(uml::Interface umlInterface) {
	match {
        require absence of java::Interface corresponding to umlInterface // TODO existance check
	}
    action {
        val javaInterface = create java::Interface and initialize {
            javaInterface.name = umlInterface.name;
            javaInterface.makePublic
        }
        call {
			createJavaCompilationUnit(umlInterface, javaInterface, umlInterface.namespace)
		}
		add correspondence between umlInterface and javaInterface
    }
}
 
//reaction UmlSuperInterfaceChanged {
//    after element uml::Generalization inserted in uml::Interface[generalization]
//    call changeJavaSuperInterface(newValue.general as org.eclipse.uml2.uml.Interface, affectedEObject)
//}
//
//routine changeJavaSuperInterface(uml::Interface superUMLInterface, uml::Interface uI) {
//    match {
//        val jI = retrieve java::Interface corresponding to uI
//        val superJavaInterface = retrieve java::Interface corresponding to superUMLInterface
//    }
//    action {
//        update jI {
//            jI.extends += createTypeReferenceAndUpdateImport(null, superJavaInterface, jI.containingCompilationUnit, userInteractor)
//        }
//    }
//}
//
//reaction UmlSuperInterfaceDeleted {
//    after element uml::Generalization removed from uml::Interface[generalization]
//    call deleteJavaSuperInterface(oldValue.general as org.eclipse.uml2.uml.Interface, affectedEObject)
//}
//
//routine deleteJavaSuperInterface(uml::Interface superUMLInterface, uml::Interface uI) {
//    match {
//        val jI = retrieve java::Interface corresponding to uI
//        val javaSuperInterface = retrieve java::Interface corresponding to superUMLInterface
//    }
//    action {
//        update jI {
//            removeClassifierFromIterator(jI.extends.iterator, javaSuperInterface)
//        }
//    }
//}

// TODO uml super interface propagation changed
reaction UmlSuperInterfaceAdded {
    after element uml::Generalization inserted in uml::Interface[generalization]
    call addJavaSuperInterface(affectedEObject, newValue)
}

routine addJavaSuperInterface(uml::Interface uInterface, uml::Generalization uGeneralization) {
    match {
        val jInterface = retrieve java::Interface corresponding to uInterface
        val jSuperInterface = retrieve java::Interface corresponding to uGeneralization.general
        require absence of java::TypeReference corresponding to uGeneralization
    }
    action {
        execute{
//            val jReference = createTypeReferenceAndUpdateImport(null, jSuperInterface, jInterface.containingCompilationUnit, userInteractor)
    		// type propagation changed
            var typeReference = createTypeReference(uGeneralization.general as Interface, Optional.of(jSuperInterface), null, userInteractor)
            addJavaImport(jInterface.containingCompilationUnit, typeReference)
            jInterface.extends += typeReference
            addGeneralizationCorrespondence(uGeneralization, typeReference)
        }
    }
}

routine addGeneralizationCorrespondence(uml::Generalization uGeneralization, java::TypeReference jReference){
	match {
		require absence of uml::Generalization corresponding to jReference
		require absence of java::TypeReference corresponding to uGeneralization
	}
	action {
		add correspondence between uGeneralization and jReference
	}
}

reaction UmlSuperInterfaceDeleted {
    after element uml::Generalization removed from uml::Interface[generalization]
    call deleteJavaSuperInterface(oldValue)
}

routine deleteJavaSuperInterface(uml::Generalization uGeneralization) {
    match {
        val jReference = retrieve java::TypeReference corresponding to uGeneralization
    }
    action {
        delete jReference
    }
}

reaction UmlSuperInterfaceReplaced{
	after element uml::Interface replaced at uml::Generalization[general]
	with {affectedEObject.specific !== null && affectedEObject.specific instanceof Interface}
	call {
		deleteJavaSuperInterface(affectedEObject)
		addJavaSuperInterface(affectedEObject.specific as Interface, affectedEObject)
	}
}

//===========================================
//=========================================== Enum
//===========================================


reaction UmlEnumCreated {
	after element uml::Enumeration created and inserted in uml::Package[packagedElement]
	call createJavaEnum(newValue)
}

routine createJavaEnum(uml::Enumeration uEnum) {
	match {
        require absence of java::Enumeration corresponding to uEnum // TODO existance check
	}
	action {
		val jEnum = create java::Enumeration and initialize {
			jEnum.name = uEnum.name
			jEnum.makePublic
		}
		call {
			createJavaCompilationUnit(uEnum, jEnum, uEnum.namespace)
		}
		add correspondence between uEnum and jEnum
	}
}

reaction UmlEnumLiteralCreated {
	after element uml::EnumerationLiteral created and inserted in uml::Enumeration[ownedLiteral]
	call createJavaEnumConstant(newValue, affectedEObject)
}

routine createJavaEnumConstant(uml::EnumerationLiteral uLiteral, uml::Enumeration uEnum) {
	match {
		val jEnum = retrieve java::Enumeration corresponding to uEnum
        require absence of java::EnumConstant corresponding to uLiteral // TODO existance check
	}
	action {
		val jConstant = create java::EnumConstant and initialize {
			jConstant.name = uLiteral.name
		}
		update jEnum {
			jEnum.constants += jConstant
		}
		add correspondence between jConstant and uLiteral
	}
}

reaction UmlEnumLiteralDeleted {
	after element uml::EnumerationLiteral deleted and removed from uml::Enumeration[ownedLiteral]
	call deleteJavaEnumConstant(oldValue)
}

routine deleteJavaEnumConstant(uml::EnumerationLiteral uLiteral) {
	match {
		val jConst = retrieve java::EnumConstant corresponding to uLiteral
	}
	action {
		delete jConst
	}
}

//===========================================
//=========================================== Package
//===========================================

//TODO adaptation to work better with the other direction: upon model creation also create a Correspondence to it 
reaction UmlModelCreated {
	after element uml::Model created and inserted as root
	call checkIfUmlModelCorrespondenceExists(newValue)
}
routine checkIfUmlModelCorrespondenceExists(uml::Model newModel){
	match {
		val alreadyCorrespondingModels = retrieve many uml::Model corresponding to UMLPackage.Literals.MODEL
	}
	action {
		execute {
			if (!alreadyCorrespondingModels.contains(newModel))
				addUmlModelCorrespondence(newModel)
		}
	}
}
routine addUmlModelCorrespondence(uml::Model newModel){
	action {
		add correspondence between UMLPackage.Literals.MODEL and newModel
	}
}

reaction UmlPackageCreated {
    after element uml::Package created and inserted in uml::Package[packagedElement]
    call createJavaPackage(newValue, affectedEObject)
}

routine createJavaPackage(uml::Package uPackage, uml::Package uSuperPackage) {
    match {
        val jSuperPackage = retrieve optional java::Package corresponding to uSuperPackage
        require absence of java::Package corresponding to uPackage // TODO existance check
    }
    action {
        val jPackage = create java::Package and initialize {
            if (uPackage instanceof org.eclipse.uml2.uml.Model) {
                jPackage.name = ""
                
            } else {
                if (uPackage.namespace !== null) {
                    jPackage.namespaces += getUmlParentNamespaceAsStringList(uPackage)
                }
                jPackage.name = uPackage.name
            }
            persistProjectRelative(uPackage, jPackage, buildJavaFilePath(jPackage))
        }
        add correspondence between jPackage and uPackage
        //Subpackage-Feature not supported by this java-metamodel version
        //update jSuperPackage {
        //    if (jSuperPackage !== null) {
        //        //add new Subpackage
        //    }
        //}
    }
}

reaction UmlPackageRenamed {
    after attribute replaced at uml::Package[name]
    with !(affectedEObject instanceof org.eclipse.uml2.uml.Model)
    call renameJavaPackage(affectedEObject, affectedEObject.namespace)
}

routine renameJavaPackage(uml::Package uPackage, uml::Namespace uNamespace) {
    match {
        val jPackage = retrieve java::Package corresponding to uPackage
    }
    action {
        update jPackage {
            jPackage.namespaces.clear
            jPackage.namespaces += getUmlParentNamespaceAsStringList(uPackage)
            jPackage.name = uPackage.name
            persistProjectRelative(uPackage, jPackage, buildJavaFilePath(jPackage))
        }
        call {
            if (!uPackage.name.equals(jPackage.name)) {
                for (compUnit : jPackage.compilationUnits) {
                    changePackageOfJavaCompilationUnit(jPackage, compUnit, uNamespace)
                }
                //Subpackage-Feature not supported by this java-metamodel version
                //for (subPackage : jPackage.subPackages) {
                //    Rename namespaces of subpackages
                //}
           }
        }
    }
}


routine changePackageOfJavaCompilationUnit(java::Package jPackage, java::CompilationUnit jCompUnit, uml::Namespace uNamespace) {
    action {
        update jCompUnit {
            jCompUnit.namespaces.clear
            jCompUnit.namespaces += jPackage.javaPackageAsStringList
            persistProjectRelative(uNamespace, jCompUnit, buildJavaFilePath(jCompUnit))
        }
    }
}
reaction UmlPackageDeleted {
    after element uml::Package deleted and removed from uml::Package[packagedElement]
    call deleteJavaPackage(oldValue)
}

routine deleteJavaPackage(uml::Package uPackage) {
    match {
        val jPackage = retrieve java::Package corresponding to uPackage
    }
    action {
        delete jPackage
    }
}



reaction UmlPrimitiveTypeCreated {
    after element uml::PrimitiveType created and inserted in uml::Model[packagedElement]
    call checkIfCorrespondingJavaPrimitiveTypeExists(newValue)
}

routine checkIfCorrespondingJavaPrimitiveTypeExists(uml::PrimitiveType uPrimType) {
    action {
        call {
            if (mapToJavaPrimitiveType(uPrimType) === null) {
                userInteractor.notificationDialogBuilder.message("There is no corresponding Java-PrimitiveType for "
                    + uPrimType + " (case sensitive)").title("Warning").notificationType(NotificationType.WARNING)
                    .windowModality(WindowModality.MODAL)
            }
        }
    }
}