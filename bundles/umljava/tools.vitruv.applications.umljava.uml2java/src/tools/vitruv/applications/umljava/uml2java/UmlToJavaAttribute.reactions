import java.util.ArrayList
import java.util.Collection
import org.eclipse.uml2.uml.LiteralUnlimitedNatural
import org.eclipse.uml2.uml.Property
import org.emftext.language.java.types.TypeReference
import tools.vitruv.domains.java.util.JavaModificationUtil

import static tools.vitruv.applications.umljava.uml2java.UmlToJavaHelper.*
import static tools.vitruv.applications.umljava.util.UmlJavaTypePropagationHelper.*
import static tools.vitruv.applications.umljava.util.java.JavaMemberAndParameterUtil.*

import static extension tools.vitruv.applications.umljava.util.java.JavaModifierUtil.*
import org.emftext.language.java.classifiers.ConcreteClassifier

import "http://www.eclipse.org/uml2/5.0.0/UML" as uml
import "http://www.emftext.org/java" as java

reactions: umlToJavaAttribute
in reaction to changes in UML
execute actions in Java

reaction UmlAttributeCreatedInClass {
    after element uml::Property created and inserted in uml::Class[ownedAttribute]
    call {
        createJavaAttribute(affectedEObject, newValue)
    }
}

//We can not define one single reaction for attribute creation in enums and classes because
//They don't have a common superclass for "having ownedAttributes"
reaction UmlAttributeCreatedInDataType {//Enum is a DataType
    after element uml::Property created and inserted in uml::DataType[ownedAttribute]
    call {
        createJavaAttribute(affectedEObject, newValue)
    }
}

routine createJavaAttribute(uml::Classifier uClassifier, uml::Property umlAttribute) {
    match {
        val jClassifier = retrieve java::ConcreteClassifier corresponding to uClassifier
        require absence of java::Field corresponding to umlAttribute // TODO existance check
    }
    action {
        val javaAttribute = create java::Field and initialize {
            javaAttribute.name = umlAttribute.name;
            javaAttribute.makePublic
        }
        update jClassifier {
            jClassifier.members += javaAttribute
        }
        add correspondence between umlAttribute and javaAttribute
        call {
            createJavaGetter(javaAttribute)
            createJavaSetter(javaAttribute)
        }
    }
}

reaction UmlAttributeDeletedFromClass {
    after element uml::Property deleted and removed from uml::Class[ownedAttribute]
    call deleteJavaAttribute(oldValue)
}

reaction UmlAttributeDeletedFromDataType {
    after element uml::Property deleted and removed from uml::DataType[ownedAttribute]
    call deleteJavaAttribute(oldValue)
}

routine deleteJavaAttribute(uml::Property umlAttr) {
    match {
        val jAttr = retrieve java::Field corresponding to umlAttr
    }
    action {
        call {
            removeJavaGettersOfAttribute(jAttr)
            removeJavaSettersOfAttribute(jAttr)
        }
        delete jAttr
        
    }
}

reaction UmlAttributeMadeFinal {
    after attribute replaced at uml::Property[isReadOnly]
    call setJavaAttributeFinal(affectedEObject) 
}

routine setJavaAttributeFinal(uml::Property umlAttr) {
    match {
        val jAttr = retrieve java::Field corresponding to umlAttr
    }
    action {
        update jAttr {
            jAttr.final = umlAttr.readOnly
        }
    }
}

// TODO changed umlAttribute type-/multiplicity-changed propagation
// TODO check if guards help reduce unnecessary collection type requests
reaction UmlAttributeTypeChanged {
    after element uml::Type replaced at uml::Property[type]
    call changeJavaAttributeType(affectedEObject)
}

reaction UmlLowerMultiplicityChanged {
    after attribute replaced at uml::LiteralInteger[value]
    with affectedEObject.owner instanceof Property
    call changeJavaAttributeType(affectedEObject.owner as Property)
}

reaction UmlUpperMultiplicityChanged {
    after attribute replaced at uml::LiteralUnlimitedNatural[value]
    with affectedEObject.owner instanceof Property
    call changeJavaAttributeType(affectedEObject.owner as Property)
}

routine changeJavaAttributeType(uml::Property uAttribute) {
    match {
        val jAttribute = retrieve java::Field corresponding to uAttribute
        val jCustomType = retrieve optional java::ConcreteClassifier corresponding to uAttribute.type
    }
    action {
        call {
        	propagateTypedMultiplicityElementTypeChanged_defaultObject(uAttribute, uAttribute.lower, uAttribute.upper, jAttribute, jCustomType, userInteractor)
        	
//        	val objectNsRef = JavaModificationUtil.createNamespaceClassifierReference(jAttribute.objectClass)// default to java.lang.Object
//        	var typeReference = createTypeReference(uAttribute.type, jCustomType, objectNsRef, userInteractor)
//        	
//        	// TODO check if write new reference is necessary (both cases: simple reference or collection<reference>)
//        	
//        	
//			if(uAttribute.lower == 0 && uAttribute.upper == LiteralUnlimitedNatural.UNLIMITED) {
//        		if(isCollectionTypeReference(jAttribute.typeReference)){
//        			// reuse previously selected CollectionType
//        			val collectionClassifier = getClassifier(jAttribute.typeReference) as ConcreteClassifier
//        			typeReference = createCollectionTypeReference(collectionClassifier, typeReference)
//        		}
//        		else {
//        			// no previously selected CollectionType
//		        	val Class<? extends Collection> collectionType = userSelectCollectionType(userInteractor)
//					typeReference = createCollectionTypeReference(collectionType, typeReference)
//        		}
//			}
//			
//			jAttribute.typeReference = typeReference
//			addJavaImport(jAttribute.containingCompilationUnit, typeReference)
		    updateAttributeTypeInSetters(jAttribute)
		    updateAttributeTypeInGetters(jAttribute)
        }
    }
}


routine createJavaGetter(java::Field jAttribute) {
    action {
        call {
            if (!javaGetterForAttributeExists(jAttribute)) {
                createGetterForAttribute(jAttribute)
            }
        }
    }
}

routine createJavaSetter(java::Field jAttribute) {
    action {
        call {
            if (!javaSetterForAttributeExists(jAttribute)) {
                createSetterForAttribute(jAttribute)
            }
        }
    }
}

reaction UmlAttributeRenamed {
    after attribute replaced at uml::Property[name]
    call renameJavaAttribute(newValue, oldValue, affectedEObject)
}

routine renameJavaAttribute(String oldName, String newName, uml::Property uAttribute) {
    match {
        val jAttribute = retrieve java::Field corresponding to uAttribute
    }
    action {
        call {
            jAttribute.name = uAttribute.name
            renameGettersOfAttribute(jAttribute, oldName)
            renameSettersOfAttribute(jAttribute, oldName)
        }
    }
}

reaction UmlAttributeCreatedInInterface {
    after element uml::Property created and inserted in uml::Interface[ownedAttribute]
    call showMessage(userInteractor, "We do not support adding attributes to interfaces. Please delete " + newValue + " from " + affectedEObject)
}

reaction UmlInterfaceMadeFinal {
    after attribute replaced at uml::Interface[isFinalSpecialization]
    with newValue == true
    call showMessage(userInteractor, "We do not support making final interfaces. Please change " + affectedEObject + " to non-final. ")
}

