import static extension tools.vitruv.applications.umljava.util.uml.UmlClassifierAndPackageUtil.*
import org.emftext.language.java.classifiers.Interface;
import static tools.vitruv.applications.umljava.util.UmlJavaTypePropagationHelper.*
import static tools.vitruv.applications.umljava.util.java.JavaTypeUtil.*;
import static tools.vitruv.applications.umljava.java2uml.JavaToUmlHelper.*;
import org.eclipse.uml2.uml.UMLPackage
import org.eclipse.uml2.uml.Model
import tools.vitruv.extensions.dslsruntime.reactions.helper.PersistenceHelper
import edu.kit.ipd.sdq.commons.util.org.eclipse.emf.common.util.URIUtil
import org.eclipse.uml2.uml.UMLFactory
import tools.vitruv.extensions.dslsruntime.reactions.helper.ReactionsCorrespondenceHelper

import "http://www.eclipse.org/uml2/5.0.0/UML" as uml
import "http://www.emftext.org/java" as java

reactions: javaToUmlClassifier
in reaction to changes in Java
execute actions in UML

//===========================================
//=========================================== Class
//===========================================

// TODO new routine to handle uml::Model initialization in java -> uml reactions
routine detectOrCreateUmlModel(EObject alreadyPersistedEObject){
	match {
		require absence of uml::Model corresponding to UMLPackage.Literals.MODEL
	}
	action {
		execute {
    		val MODELNAME_INPUTMESSAGE = "Please enter a name for the uml root model (no file ending)"
    		val MODELPATH_INPUTMESSAGE = "Please enter a path for the uml root model (project relative)"
			var userModelName = userInteractor.textInputDialogBuilder.message(MODELNAME_INPUTMESSAGE).startInteraction()
			var userModelPath = userInteractor.textInputDialogBuilder.message(MODELPATH_INPUTMESSAGE).startInteraction()
			if (userModelName.nullOrEmpty) {
				userModelName = "model"
			} 
			if (userModelPath.nullOrEmpty) {
                userModelPath = "model"
            }
            val rootModelFile = userModelPath + "/" + userModelName + ".uml"
            //check if a model at the specified path already exists; create one if necessary
			var Model umlRootModel = null
			if(alreadyPersistedEObject === null){
				// no objects persisted jet -> can't automatically retrieve projectPath
				throw new UnsupportedOperationException(
					"Can not persist an uml::Model from JavaToUml-reactions without any previously persisted elements."
				);
			}
			val uri = PersistenceHelper.getURIFromSourceProjectFolder(alreadyPersistedEObject, rootModelFile) 
			if(URIUtil.existsResourceAtUri(uri)){ 
				// TODO the resource is only found if it was previously persisted, wich only happens after the change propagation terminates 
				val resource = alreadyPersistedEObject.eResource.resourceSet.getResource(uri,true)
				umlRootModel = resource.allContents.filter(Model).head				
			}
			if(umlRootModel === null){ //the resource didn't exist, or did not contain a uml::Model object
				umlRootModel = UMLFactory.eINSTANCE.createModel
				umlRootModel.name = userModelName;
				
				persistProjectRelative(alreadyPersistedEObject, umlRootModel, rootModelFile)
			}
			if(umlRootModel !== null){
				registerUmlModelInCorrespondenceModel(umlRootModel)
			}
		}
	}
}

routine registerUmlModelInCorrespondenceModel(uml::Model uModel){
	match {
		require absence of uml::Model corresponding to UMLPackage.Literals.MODEL
	}
	action {
		add correspondence between uModel and UMLPackage.Literals.MODEL
	}
	
}

reaction JavaClassCreated {
    after element java::Class created and inserted in java::CompilationUnit[classifiers]
    call {
    	detectOrCreateUmlModel(affectedEObject)
		registerPredefinedUmlPrimitiveTypes(correspondenceModel)
	    createUmlClass(newValue, affectedEObject)
    }
}

routine createUmlClass(java::Class jClass, java::CompilationUnit jCompUnit) {
	match {
		require absence of uml::Class corresponding to jClass // TODO existance check
	}
    action {
        val uClass = create uml::Class and initialize {
            uClass.name = jClass.name;
        }
        add correspondence between uClass and jClass
        add correspondence between uClass and jCompUnit
        call {
            addUmlElementToModelOrPackage(jCompUnit, uClass)
        }
    }
}

routine addUmlElementToPackage(uml::PackageableElement uPackageable, uml::Package uPackage) {
    action {
        update uPackage {
            uPackage.packagedElements += uPackageable
        }
    }
}

reaction JavaCompUnitDeleted {
    after element java::CompilationUnit removed as root
    call deleteUmlClassifier(oldValue.classifiers.head, oldValue)
}

reaction JavaClassifierDeleted {
    after element java::ConcreteClassifier deleted and removed from java::CompilationUnit[classifiers]
    call deleteUmlClassifier(oldValue, affectedEObject)
}

routine deleteUmlClassifier(java::ConcreteClassifier jClassifier, java::CompilationUnit jCompUnit) {
    match {
        val uClassfier = retrieve uml::Classifier corresponding to jClassifier
    }
    action {
        delete uClassfier
        delete jCompUnit
    }
}

reaction JavaClassMadeAbstract {
    after element java::Abstract created and inserted in java::Class[annotationsAndModifiers]
    call setUmlClassAbstract(affectedEObject, true)
}

reaction JavaClassMadeNonAbstract {
    after element java::Abstract deleted and removed from java::Class[annotationsAndModifiers]
    call setUmlClassAbstract(affectedEObject, false)
}

routine setUmlClassAbstract(java::Class jClass, Boolean isAbstract) {
    match {
        val uClass = retrieve uml::Class corresponding to jClass
    }
    action {
        update uClass {
            uClass.isAbstract = isAbstract
        }
    }
}

reaction JavaClassMadeFinal {
    after element java::Final created and inserted in java::Class[annotationsAndModifiers]
    call setUmlClassFinal(affectedEObject, true)
}

reaction JavaClassMadeNonFinal {
    after element java::Final deleted and removed from java::Class[annotationsAndModifiers]
    call setUmlClassFinal(affectedEObject, false)
}

routine setUmlClassFinal(java::Class jClass, Boolean isFinal) {
    match {
        val uClass = retrieve uml::Class corresponding to jClass
    }
    action {
        update uClass {
            uClass.isFinalSpecialization = isFinal
        }
    }
}

// TODO java super class propagation changed
reaction JavaSuperClassChanged {
    after element java::TypeReference replaced at java::Class[^extends]
    with {getClassifierFromTypeReference(newValue) instanceof org.emftext.language.java.classifiers.Class}
    call {
    	if (oldValue !== null)
    		deleteUmlSuperClassGeneralization(newValue)
    	if (newValue !== null){
    		val jSuperClass = getClassifier(newValue) as org.emftext.language.java.classifiers.Class
    		addUmlSuperClassGeneralization(affectedEObject, newValue, jSuperClass)
    	}
    }
}

routine addUmlSuperClassGeneralization(java::Class jClass, java::TypeReference jReference, java::Class jSuperClass){
	match {
		val uClass = retrieve uml::Class corresponding to jClass
//        val uModel = retrieve uml::Model corresponding to UMLPackage.Literals.MODEL
		val uSuperClass = retrieve uml::Class corresponding to jSuperClass
		require absence of uml::Generalization corresponding to jReference
        //We can not retrieve the corresponding Uml-SuperClass here because the
        //jSuperClass doesn't need to reference the 'real' jSuperClass-Element
	}
	action {
		execute {
//			val jSuperClass = getClassifierFromTypeReference(jReference) as org.emftext.language.java.classifiers.Class
//            val uSuperClass = getUmlType(jSuperClass, uModel, correspondenceModel)
            if (uSuperClass !== null && uSuperClass instanceof org.eclipse.uml2.uml.Class) {
                val uGeneralization = uClass.createGeneralization(uSuperClass as org.eclipse.uml2.uml.Class)
                addGeneralizationCorrespondence(uGeneralization, jReference)
            } else {
                logger.warn("Could not add " + jSuperClass.name + " as super class for " + uClass + " because the corresponding UML-SuperClass is null")
            }
            
        }
	}
}

routine deleteUmlSuperClassGeneralization(java::TypeReference jReference){
	match {
		val uGeneralization = retrieve uml::Generalization corresponding to jReference
	}
	action {
		delete uGeneralization
	}
}


// TODO java interface implemented propagation changed
reaction JavaClassImplementAdded {
    after element java::TypeReference created and inserted in java::Class[implements]
    call{
    	val jInterface = getClassifier(newValue) as Interface
	    addUmlClassImplement(affectedEObject, newValue, jInterface)//getClassifierFromTypeReference(newValue))
    } 
}

routine addUmlClassImplement(java::Class jClass, java::TypeReference jReference, java::Interface jInterface) {
    match {
        val uClass = retrieve uml::Class corresponding to jClass
//        val uModel = retrieve uml::Model corresponding to UMLPackage.Literals.MODEL
		val uInterface = retrieve uml::Interface corresponding to jInterface
        require absence of uml::InterfaceRealization corresponding to jReference // TODO existance check
        //We can not retrieve the corresponding Uml-Interface here because the
        //jInterface doesn't need to reference the 'real' jInterface-Element
    }
    action {
        execute {
//        	val jInterface = getClassifierFromTypeReference(jReference)
//            val uInterface = getUmlType(jInterface, uModel, correspondenceModel)
            if (uInterface !== null) {
                val uRealization = uClass.createInterfaceRealization(uInterface.name + uInterface.name, uInterface)
                addImplementsCorrespondence(jReference, uRealization)
            } else {
                logger.warn("Could not add " + jInterface.name + " as implemented interface for " + uClass + " because the corresponding UML-Interface is null")
            }
            
        }
    }
}

routine addImplementsCorrespondence(java::TypeReference jReference, uml::InterfaceRealization uRealization){
	match {
		require absence of uml::InterfaceRealization corresponding to jReference
	}
	action {
		add correspondence between uRealization and jReference
	}
}

reaction JavaClassImplementRemoved {
    after element java::TypeReference removed from java::Class[implements]
    call removeUmlClassImplement(affectedEObject, oldValue)
}

routine removeUmlClassImplement(java::Class jClass, java::TypeReference jReference) {
    match {
        val uClass = retrieve uml::Class corresponding to jClass
        val uRealization = retrieve uml::InterfaceRealization corresponding to jReference
    }
    action {
        update uClass {
            val uInterface = uRealization?.contract
            if (uInterface !== null) {
                uClass.removeUmlImplementedInterface(uInterface)
            }
        }
        delete uRealization
    }
}

// TODO handle ReferenceChanges for java::TypeReferences that correspond to uml::InterfaceRealization and uml::Generalization respectively

//===========================================
//=========================================== Interface
//===========================================

reaction JavaInterfaceCreated {
    after element java::Interface created and inserted in java::CompilationUnit[classifiers]
    call {
    	detectOrCreateUmlModel(affectedEObject)
		registerPredefinedUmlPrimitiveTypes(correspondenceModel)
    	createUmlInterface(newValue, affectedEObject)
	}
}

routine createUmlInterface(java::Interface jInterface, java::CompilationUnit jCompUnit) {
	match {
		require absence of uml::Interface corresponding to jInterface // TODO existance check
	}
    action {
        val uInterface = create uml::Interface and initialize {
            uInterface.name = jInterface.name;
        }
        add correspondence between uInterface and jInterface
        add correspondence between uInterface and jCompUnit
        call {
            addUmlElementToModelOrPackage(jCompUnit, uInterface)
        }   
    }
}

// TODO java super interface propagation changed
reaction JavaSuperInterfaceAdded {
    after element java::TypeReference inserted in java::Interface[^extends]
    call {
    	val jSuperInterface = getClassifier(newValue) as Interface
    	addUmlSuperinterfaces(affectedEObject, newValue, jSuperInterface)
    }
}

routine addUmlSuperinterfaces(java::Interface jInterface, java::TypeReference jReference, java::Interface jSuperInterface) {
    match {
        val uModel = retrieve uml::Model corresponding to UMLPackage.Literals.MODEL
        val uInterface = retrieve uml::Interface corresponding to jInterface
        val uSuperInterface = retrieve uml::Interface corresponding to jSuperInterface
        //We can not retrieve the corresponding Uml-SuperInterface here because the
        //jSuperInterface doesn't need to reference the 'real' jSuperInterface-Element
        require absence of uml::Generalization corresponding to jReference
    }
    action {
        execute {
        	// TODO changed to direct retrieve
//        	val jSuperInterface = getClassifierFromTypeReference(jReference)
//            val uSuperInterface = getUmlType(jSuperInterface, uModel, correspondenceModel)
            if (uSuperInterface !== null && uSuperInterface instanceof org.eclipse.uml2.uml.Interface) {
//                uInterface.addUmlSuperClassifier(uSuperInterface as org.eclipse.uml2.uml.Interface)
            	val uGeneralization = uInterface.createGeneralization(uSuperInterface as org.eclipse.uml2.uml.Interface)
            	addGeneralizationCorrespondence(uGeneralization, jReference)
            } else {
                logger.warn("Could not add " + jSuperInterface.name + " as super interface for " + uInterface + " because the corresponding UML-Superinterface is null")
            }
            
        }
    }
}

routine addGeneralizationCorrespondence(uml::Generalization uGeneralization, java::TypeReference jReference){
	match {
		require absence of uml::Generalization corresponding to jReference
		require absence of java::TypeReference corresponding to uGeneralization
	}
	action {
		add correspondence between uGeneralization and jReference
	}
}

reaction JavaSuperInterfaceRemoved {
    after element java::TypeReference removed from java::Interface[^extends]
    call removeUmlSuperInterface(affectedEObject, oldValue)
}

routine removeUmlSuperInterface(java::Interface jInterface, java::TypeReference jReference) {
    match {
        val uInterface = retrieve uml::Interface corresponding to jInterface
        val uGeneralization = retrieve uml::Generalization corresponding to jReference
    }
    action {
        delete uGeneralization
    }
}

//===========================================
//=========================================== Package
//===========================================

reaction JavaPackageCreated {
    after element java::Package inserted as root
    call {
    	detectOrCreateUmlModel(newValue)
		registerPredefinedUmlPrimitiveTypes(correspondenceModel)
	    createUmlPackage(newValue)
    }
}

routine createUmlPackage(java::Package jPackage) {
	match {
        val uModel = retrieve uml::Model corresponding to UMLPackage.Literals.MODEL
		require absence of uml::Package corresponding to jPackage // TODO existance check
	}
	action {
		val uPackage = create uml::Package and initialize {
			uPackage.name = jPackage.name
		}
		add correspondence between uPackage and jPackage
		call {
		    if (jPackage.namespaces.nullOrEmpty) {
		        addUmlElementToPackage(uPackage, uModel)
		    } else {
		        addUmlElementToPackage(uPackage, findUmlPackage(correspondenceModel, jPackage.namespaces.last))
		    }
		}
	}
}

reaction JavaPackageDeleted {
    after element java::Package deleted and removed as root
    call deleteUmlPackage(oldValue)
}

routine deleteUmlPackage(java::Package jPackage) {
    match {
        val uPackage = retrieve uml::Package corresponding to jPackage
    }
    action {
        delete uPackage
    }
}

reaction JavaCompilationUnitInsertedInPackage {
    after element java::CompilationUnit inserted in java::Package[compilationUnits]
    call addUmlPackageOfClass(affectedEObject, newValue.classifiers.head)
}

reaction JavaCompilationUnitRemovedFromPackage {
    after element java::CompilationUnit removed from java::Package[compilationUnits]
    call removeUmlPackageOfClass(affectedEObject, oldValue.classifiers.head)
}

routine addUmlPackageOfClass(java::Package jPackage, java::ConcreteClassifier jClassifier) {
    match {
        val uClassifier = retrieve uml::Classifier corresponding to jClassifier
        val uPackage = retrieve uml::Package corresponding to jPackage
    }
    action {
        update uPackage {
            uPackage.packagedElements += uClassifier
        }
    }
}

routine removeUmlPackageOfClass(java::Package jPackage, java::ConcreteClassifier jClassifier) {
    match {
        val uClassifier = retrieve uml::Classifier corresponding to jClassifier
        val uPackage = retrieve uml::Package corresponding to jPackage
    }
    action {
        update uPackage {
            removePackagedElementFromPackage(uPackage, uClassifier)
        }
    }
}

routine addUmlElementToModelOrPackage(java::CompilationUnit jCompUnit, uml::Classifier uClassifier) {
	match {
        val uModel = retrieve uml::Model corresponding to UMLPackage.Literals.MODEL
	}
    action {
       call {
            if (jCompUnit.namespaces.nullOrEmpty) {
                addUmlElementToPackage(uClassifier, uModel)
            } else {
                addUmlElementToPackage(uClassifier, findUmlPackage(correspondenceModel, jCompUnit.namespaces.last))
            }
        }
        
    }
}

//===========================================
//=========================================== Enum
//===========================================

reaction JavaEnumCreated {
    after element java::Enumeration created and inserted in java::CompilationUnit[classifiers]
    call {
    	detectOrCreateUmlModel(affectedEObject)
		registerPredefinedUmlPrimitiveTypes(correspondenceModel)
	    createUmlEnum(newValue, affectedEObject)
    }
}

routine createUmlEnum(java::Enumeration jEnum, java::CompilationUnit jCompUnit) {
	match {
		require absence of uml::Enumeration corresponding to jEnum // TODO existance check
	}
    action {
        val uEnum = create uml::Enumeration and initialize {
            uEnum.name = jEnum.name;
        }
        call {
            addUmlElementToModelOrPackage(jCompUnit, uEnum)
        }
        add correspondence between uEnum and jEnum
        add correspondence between uEnum and jCompUnit
    }
}

reaction JavaEnumConstantCreated {
    after element java::EnumConstant created and inserted in java::Enumeration[constants]
    call createUmlEnumLiteral(affectedEObject, newValue)
}

routine createUmlEnumLiteral(java::Enumeration jEnum, java::EnumConstant jConstant) {
    match {
        val uEnum = retrieve uml::Enumeration corresponding to jEnum
		require absence of uml::EnumerationLiteral corresponding to jConstant // TODO existance check
    }
    action {
        val uLiteral = create uml::EnumerationLiteral and initialize {
            uLiteral.name = jConstant.name
        }
        add correspondence between uLiteral and jConstant
        update uEnum {
            uEnum.ownedLiterals += uLiteral
        }
    }
}

reaction JavaEnumConstantDeleted {
    after element java::EnumConstant deleted and removed from java::Enumeration[constants]
    call deleteUmlEnumLiteral(oldValue)
}

routine deleteUmlEnumLiteral(java::EnumConstant jConstant) {
    match {
        val uLiteral = retrieve uml::EnumerationLiteral corresponding to jConstant
    }
    action {
        delete uLiteral
    }
}

//===========================================
//=========================================== Unsupported
//===========================================

reaction JavaEnumerationImplementAdded {
    after element java::TypeReference created and inserted in java::Enumeration[implements]
    call showMessage(userInteractor, "Implement relations from enums are not supported. Please remove it from " + affectedEObject)
}

reaction JavaClassifierMadeStatic {
    after element java::Static created and inserted in java::ConcreteClassifier[annotationsAndModifiers]
    call showMessage(userInteractor, "Static classifiers are not supported. Please undo the change at " + affectedEObject)
}
