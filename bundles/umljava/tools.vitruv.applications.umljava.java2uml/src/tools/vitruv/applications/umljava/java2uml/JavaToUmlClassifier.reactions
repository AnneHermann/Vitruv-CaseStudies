import org.eclipse.uml2.uml.VisibilityKind

import org.emftext.language.java.modifiers.*
import static extension tools.vitruv.applications.umljava.util.uml.UmlClassifierAndPackageUtil.*
import org.emftext.language.java.classifiers.Interface;
import org.apache.log4j.PropertyConfigurator
import static tools.vitruv.applications.umljava.util.java.JavaTypeUtil.*;
import static tools.vitruv.applications.umljava.util.uml.UmlClassifierAndPackageUtil.*;
import static tools.vitruv.applications.umljava.java2uml.JavaToUmlHelper.*;
import org.emftext.language.java.classifiers.ConcreteClassifier
import static extension tools.vitruv.framework.correspondence.CorrespondenceModelUtil.*

import "http://www.eclipse.org/uml2/5.0.0/UML" as uml
import "http://www.emftext.org/java" as java

reactions: JavaToUmlClassifier
in reaction to changes in Java
execute actions in UML

reaction JavaClassCreated {
    after element java::Class created and inserted in java::CompilationUnit[classifiers]
    call createUmlClass(newValue, affectedEObject)

}

routine createUmlClass(java::Class jClass, java::CompilationUnit jCompUnit) {
    action {
        val uClass = create uml::Class and initialize {
            uClass.name = jClass.name;
        }
        call {
            if (jCompUnit.namespaces.nullOrEmpty) {
                addUmlElementToPackage(uClass, getUmlModel(correspondenceModel, userInteracting), jCompUnit)
            } else {
                addUmlElementToPackage(uClass, findUmlPackage(correspondenceModel, jCompUnit.namespaces.last), jCompUnit)
            }
        	
        }
        add correspondence between uClass and jClass
        add correspondence between uClass and jCompUnit
    }
}

routine addUmlElementToRootModel(uml::PackageableElement uPackageable, EObject persistedObject) {
	action {
		call {
			val uModel = getUmlModel(correspondenceModel, userInteracting)
            
		}
	}
}

routine addUmlElementToPackage(uml::PackageableElement uPackageable, uml::Package uPackage, EObject persistedObject) {
    action {
        update uPackage {
            uPackage.packagedElements += uPackageable
        }
        call {
            if (uPackage instanceof org.eclipse.uml2.uml.Model) {
                
                if (uPackage.packagedElements.size == 1) {
                   persistProjectRelative(persistedObject, uPackage, rootModelFile)
                }
            } else {
               
            }
        }
    }
}

reaction JavaInterfaceCreated {
    after element java::Interface created and inserted in java::CompilationUnit[classifiers]
    call createUmlInterface(newValue, affectedEObject)
}

routine createUmlInterface(java::Interface jInterface, java::CompilationUnit jCompUnit) {
    action {
        val uInterface = create uml::Interface and initialize {
            uInterface.name = jInterface.name;
            uInterface.visibility = VisibilityKind.PUBLIC_LITERAL
        }
        call {
            if (jCompUnit.namespaces.nullOrEmpty) {
                addUmlElementToPackage(uInterface, getUmlModel(correspondenceModel, userInteracting), jCompUnit)
            } else {
                addUmlElementToPackage(uInterface, findUmlPackage(correspondenceModel, jCompUnit.namespaces.last), jCompUnit)
            }
        }   
        add correspondence between uInterface and jInterface
        add correspondence between uInterface and jCompUnit
    }
}

reaction JavaCompUnitDeleted {
    after element java::CompilationUnit removed as root
    call deleteUmlClassifier(oldValue.classifiers.head, oldValue)
}

reaction JavaClassifierDeleted {
    after element java::ConcreteClassifier deleted and removed from java::CompilationUnit[classifiers]
    call deleteUmlClassifier(oldValue, affectedEObject)
}

routine deleteUmlClassifier(java::ConcreteClassifier jClass, java::CompilationUnit jCompUnit) {
    match {
        val uClass = retrieve uml::Classifier corresponding to jClass
    }
    action {
        delete uClass
        delete jCompUnit
    }
}

reaction JavaElementVisibilityChanged {
    after element java::Modifier created and inserted in java::AnnotableAndModifiable[annotationsAndModifiers]
    with newValue instanceof Public || newValue instanceof Private || newValue instanceof Protected
    call changeUmlNamedElementVisibility(affectedEObject, newValue)
}

reaction JavaElementMadePackagePrivate {
    after element java::Modifier deleted and removed from java::Class[annotationsAndModifiers]
    with oldValue instanceof Private
    || oldValue instanceof Public
    || oldValue instanceof Protected
    call changeUmlNamedElementVisibility(affectedEObject, null)
}

routine changeUmlNamedElementVisibility(java::AnnotableAndModifiable jElem, java::Modifier mod) {
    match {
        val uElem = retrieve uml::NamedElement corresponding to jElem
    }
    action {
        update uElem {
            uElem.visibility = getUmlVisibilityKind(mod);
        }
    }
}

reaction JavaClassMadeAbstract {
    after element java::Abstract created and inserted in java::Class[annotationsAndModifiers]
    call setUmlClassAbstract(affectedEObject, true)
}

reaction JavaClassMadeNonAbstract {
    after element java::Abstract deleted and removed from java::Class[annotationsAndModifiers]
    call setUmlClassAbstract(affectedEObject, false)
}

routine setUmlClassAbstract(java::Class jClass, Boolean isAbstract) {
    match {
        val uClass = retrieve uml::Class corresponding to jClass
    }
    action {
        update uClass {
            uClass.isAbstract = isAbstract
        }
    }
}

reaction JavaSuperClassChanged {
    after element java::TypeReference replaced at java::Class[^extends]
    call addUmlSuperClass(affectedEObject, getClassifierFromTypeReference(newValue) as org.emftext.language.java.classifiers.Class)
}

reaction JavaSuperClassRemoved {
    after element java::TypeReference removed from java::Class[^extends]
    call clearUmlSuperClassifiers(affectedEObject)
}

routine addUmlSuperClass(java::Class jClass, java::Class jSuperClass) {
    match {
        val uClass = retrieve uml::Class corresponding to jClass
        //We can not retrieve the corresponding Uml-SuperClass here because the
        //jSuperClass is probably not contained in the same model (i.e. compilation unit)
        //as the jClass
    }
    action {
        update uClass {
            uClass.addUmlSuperClassifier(
                findFirstCorrespondeningUmlElementByNameAndType(correspondenceModel, 
                    jSuperClass.name, org.eclipse.uml2.uml.Class)
            )
        }
    }
}

routine addUmlSuperinterfaces(java::Interface jInterface, java::Classifier jSuperInterface) {
    match {
        val uInterface = retrieve uml::Interface corresponding to jInterface
        //We can not retrieve the corresponding Uml-SuperInterface here because the
        //jSuperInterface is probably not contained in the same model (i.e. compilation unit)
        //as the jInterface
    }
    action {
        update uInterface {
            uInterface.addUmlSuperClassifier(
                findFirstCorrespondeningUmlElementByNameAndType(correspondenceModel, 
                    jSuperInterface.name, org.eclipse.uml2.uml.Interface)
            )
        }
    }
}

routine clearUmlSuperClassifiers(java::ConcreteClassifier jClass) {
    match {
         val uClass = retrieve uml::Class corresponding to jClass
    }
    action {
        update uClass {
            uClass.generalizations.clear;
        }
    }
}

reaction JavaSuperInterfaceAdded {
    after element java::TypeReference inserted in java::Interface[^extends]
    call addUmlSuperinterfaces(affectedEObject, getClassifierFromTypeReference(newValue))
}

reaction JavaSuperInterfaceRemoved {
    after element java::TypeReference removed from java::Interface[^extends]
    call removeUmlSuperInterface(affectedEObject, getClassifierFromTypeReference(oldValue))
}

routine removeUmlSuperInterface(java::Interface jI, java::Classifier jSuperClassifier) {
    match {
        val uInterface = retrieve uml::Interface corresponding to jI
        //We can not retrieve the corresponding Uml-SuperClassifier here because the
        //jSuperClassifier is probably not contained in the same model (i.e. compilation unit)
        //as the jSuperClassifier
    }
    action {
        update uInterface {
            uInterface.removeUmlGeneralClassifier(findFirstCorrespondeningUmlElementByNameAndType(correspondenceModel, 
                    jSuperClassifier.name, org.eclipse.uml2.uml.Interface))
        }
    }
}

reaction JavaClassImplementAdded {
    after element java::TypeReference created and inserted in java::Class[implements]
    call addUmlClassImplement(affectedEObject, getClassifierFromTypeReference(newValue))
}

routine addUmlClassImplement(java::Class jClass, java::Classifier jInterface) {
    match {
        val uClass = retrieve uml::Class corresponding to jClass
    }
    action {
        update uClass {
            val uInterface = findFirstCorrespondeningUmlElementByNameAndType(correspondenceModel, 
                    jInterface.name, org.eclipse.uml2.uml.Interface)
            uClass.createInterfaceRealization(DEFAULT_INTERFACEREALIZATION_NAME + uInterface.name, uInterface)
        }
    }
}

reaction JavaClassImplementRemoved {
    after element java::TypeReference removed from java::Class[implements]
    call removeUmlClassImplement(affectedEObject, getClassifierFromTypeReference(oldValue) as Interface)
}

routine removeUmlClassImplement(java::Class jClass, java::Interface jInterface) {
    match {
        val uClass = retrieve uml::Class corresponding to jClass
    }
    action {
        update uClass {
            uClass.removeUmlImplementedInterface(findFirstCorrespondeningUmlElementByNameAndType(correspondenceModel, 
                    jInterface.name, org.eclipse.uml2.uml.Interface))
        }
    }
}

reaction JavaClassMadeFinal {
    after element java::Final created and inserted in java::Class[annotationsAndModifiers]
    call setUmlClassFinal(affectedEObject, true)
}

reaction JavaClassMadeNonFinal {
    after element java::Final deleted and removed from java::Class[annotationsAndModifiers]
    call setUmlClassFinal(affectedEObject, false)
}

routine setUmlClassFinal(java::Class jClass, Boolean isFinal) {
    match {
        val uClass = retrieve uml::Class corresponding to jClass
    }
    action {
        update uClass {
            uClass.isFinalSpecialization = isFinal
        }
    }
}

reaction JavaNamedElementRenamed {
    after attribute replaced at java::NamedElement[name]
    call renameUmlNamedElement(affectedEObject)
}

routine renameUmlNamedElement(java::NamedElement jElement) {
    match {
        val uElement = retrieve uml::NamedElement corresponding to jElement
    }
    action {
        update uElement {
            uElement.name = jElement.name;
        }
    }
}

reaction JavaPackageCreated {
	after element java::Package inserted as root
	call createUmlPackage(newValue)
}

routine createUmlPackage(java::Package jPackage) {
	action {
		val uPackage = create uml::Package and initialize {
			uPackage.name = jPackage.name
		}
		add correspondence between uPackage and jPackage
		call {
		    if (jPackage.namespaces.nullOrEmpty) {
		        addUmlElementToPackage(uPackage, getUmlModel(correspondenceModel, userInteracting), jPackage)
		    } else {
		        addUmlElementToPackage(uPackage, findUmlPackage(correspondenceModel, jPackage.namespaces.last), jPackage)
		    }
		}
	}
}

reaction JavaCompilationUnitInsertedInPackage {
    after element java::CompilationUnit inserted in java::Package[compilationUnits]
    call addUmlPackageOfClass(affectedEObject, newValue.classifiers.head)
}

reaction JavaCompilationUnitRemovedFromPackage {
    after element java::CompilationUnit removed from java::Package[compilationUnits]
    call removeUmlPackageOfClass(affectedEObject, oldValue.classifiers.head)
}

routine addUmlPackageOfClass(java::Package jPackage, java::ConcreteClassifier jClassifier) {
    match {
        val uClassifier = retrieve uml::Classifier corresponding to jClassifier
        val uPackage = retrieve uml::Package corresponding to jPackage
    }
    action {
        update uPackage {
            uPackage.packagedElements += uClassifier
        }
    }
}

routine removeUmlPackageOfClass(java::Package jPackage, java::ConcreteClassifier jClassifier) {
    match {
        val uClassifier = retrieve uml::Classifier corresponding to jClassifier
        val uPackage = retrieve uml::Package corresponding to jPackage
    }
    action {
        update uPackage {
            removePackagedElementFromPackage(uPackage, uClassifier)
        }
    }
}

reaction JavaEnumCreated {
    after element java::Enumeration created and inserted in java::CompilationUnit[classifiers]
    call createUmlEnum(newValue, affectedEObject)
}

routine createUmlEnum(java::Enumeration jEnum, java::CompilationUnit jCompUnit) {
    action {
        val uEnum = create uml::Enumeration and initialize {
            uEnum.name = jEnum.name;
        }
        call {
            if (jCompUnit.namespaces.nullOrEmpty) {
                addUmlElementToPackage(uEnum, getUmlModel(correspondenceModel, userInteracting), jCompUnit)
            } else {
                addUmlElementToPackage(uEnum, findUmlPackage(correspondenceModel, jCompUnit.namespaces.last), jCompUnit)
            }
        }
        add correspondence between uEnum and jEnum
        add correspondence between uEnum and jCompUnit
    }
}

reaction JavaEnumConstantCreated {
    after element java::EnumConstant created and inserted in java::Enumeration[constants]
    call createUmlEnumLiteral(affectedEObject, newValue)
}

routine createUmlEnumLiteral(java::Enumeration jEnum, java::EnumConstant jConstant) {
    match {
        val uEnum = retrieve uml::Enumeration corresponding to jEnum
    }
    action {
        val uLiteral = create uml::EnumerationLiteral and initialize {
            uLiteral.name = jConstant.name
        }
        add correspondence between uLiteral and jConstant
        update uEnum {
            uEnum.ownedLiterals += uLiteral
        }
    }
}

reaction JavaEnumConstantDeleted {
    after element java::EnumConstant deleted and removed from java::Enumeration[constants]
    call deleteUmlEnumLiteral(oldValue)
}

routine deleteUmlEnumLiteral(java::EnumConstant jConstant) {
    match {
        val uLiteral = retrieve uml::EnumerationLiteral corresponding to jConstant
    }
    action {
        delete uLiteral
    }
}
