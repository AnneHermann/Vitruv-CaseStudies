import static extension tools.vitruv.applications.pcmjava.pojotransformations.java2pcm.Java2PcmHelper.*
import tools.vitruv.applications.pcmjava.util.java2pcm.TypeReferenceCorrespondenceHelper
import org.emftext.language.java.members.ClassMethod

import "http://www.emftext.org/java" as java
import "http://palladiosimulator.org/PalladioComponentModel/5.2" as pcm

reactions: Java2PcmMethod
in reaction to changes in Java
execute actions in PCM

//Rename
reaction JavaNamedElementRenamed {
    after attribute replaced at java::NamedElement[name]
    call renameUmlNamedElement(affectedEObject)
}

routine renameUmlNamedElement(java::NamedElement jElement) {
    match {
        val uElement = retrieve pcm::NamedElement corresponding to jElement
    }
    action {
        update uElement {
            uElement.entityName = jElement.name;
        }
    }
}

//Field
reaction CreateField {
	after element java::Field inserted in java::Class[members]
	call {
			foo(newValue.containingConcreteClassifier, newValue)
	}
}

routine foo(java::ConcreteClassifier classifier, java::Field field) {
	match {
		val f = retrieve pcm::CompositeDataType corresponding to classifier
	}
	action {
			val innerDeclaration = create pcm::InnerDeclaration and initialize {
				innerDeclaration.entityName = field.name
				innerDeclaration.datatype_InnerDeclaration = TypeReferenceCorrespondenceHelper.
					getCorrespondingPCMDataTypeForTypeReference(field.typeReference, correspondenceModel,
						userInteracting, null, field.arrayDimension)
				innerDeclaration.compositeDataType_InnerDeclaration = f
			}
			
	}
}
//Class Method
reaction CreateClassMethod {
	after element java::ClassMethod inserted in java::Class[members]
	call createUmlClassMethod(newValue, affectedEObject)
}

routine createUmlClassMethod(java::ClassMethod classMethod, java::Class cls) {
	action {
		call {
			val methods = findImplementingInterfacesFromTypeRefs(cls.implements)
			.filter[x | hasCorrespondance(x, correspondenceModel)]
			.map[x|x.methods]
			.flatten
			.filter[sameSignature(classMethod)]
			
			for (method : methods) {
				createSEFF(method, cls, classMethod)
			}
			
		}
	}
}

routine createSEFF(java::Method method, java::Class cls, java::ClassMethod classMethod) {
	match {
		val opSignature = retrieve pcm::OperationSignature corresponding to method
		val basicComponent = retrieve pcm::BasicComponent corresponding to cls
	}
	action {
		val rdseff = create pcm::ResourceDemandingSEFF and initialize {
			rdseff.describedService__SEFF = opSignature
			rdseff.basicComponent_ServiceEffectSpecification = basicComponent
		}
		add correspondence between classMethod and rdseff
		
		update basicComponent {
			basicComponent.serviceEffectSpecifications__BasicComponent += rdseff
		}
	}
}



//Interface Method
reaction CreateInterfaceMethod {
	after element java::InterfaceMethod inserted in java::Interface[members] 
	call createPCMSignature(newValue)
}

routine createPCMSignature(java::InterfaceMethod method) {
	match {
		val pcmInterface = retrieve pcm::OperationInterface corresponding to method.containingConcreteClassifier
	}
	action {
		val operationSignature = create pcm::OperationSignature and initialize {
			operationSignature.entityName = method.name
			operationSignature.interface__OperationSignature = pcmInterface
		}
		
		update pcmInterface {
			pcmInterface.signatures__OperationInterface += operationSignature
		}
		
		add correspondence between operationSignature and method
	}
}

reaction JavaReturnTypeChanged {
    after element java::TypeReference replaced at java::Method[typeReference]
    call changeUmlReturnType(affectedEObject, newValue)
}

routine changeUmlReturnType(java::Method jMeth, java::TypeReference jType) {
    match {
        val operationSignature = retrieve pcm::OperationSignature corresponding to jMeth
    }
     action {
         update operationSignature {
         	val repository = operationSignature.interface__OperationSignature.repository__Interface
             operationSignature.returnType__OperationSignature = getPCMDataTypeForTypeReference(jType, correspondenceModel, userInteracting, repository, jMeth)
         }
     }
}
