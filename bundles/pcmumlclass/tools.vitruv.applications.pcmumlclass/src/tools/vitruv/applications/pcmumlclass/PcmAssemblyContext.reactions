import org.eclipse.uml2.uml.LiteralUnlimitedNatural
import org.palladiosimulator.pcm.repository.CollectionDataType
import tools.vitruv.applications.pcmumlclass.PcmUmlClassHelper
import tools.vitruv.applications.pcmumlclass.TagLiterals
import org.eclipse.uml2.uml.Property

import "http://www.eclipse.org/uml2/5.0.0/UML" as uml 
import "http://palladiosimulator.org/PalladioComponentModel/5.2" as pcm

reactions: pcmAssemblyContextReactions
in reaction to changes in PCM
execute actions in UML

reaction AssemblyContextInserted {
	after element pcm::AssemblyContext inserted in pcm::ComposedProvidingRequiringEntity[assemblyContexts__ComposedStructure]
	with{affectedEObject.assemblyContexts__ComposedStructure.contains(newValue)}
	call insertCorrespondingAssemblyContextField(newValue, affectedEObject)
}

routine insertCorrespondingAssemblyContextField(pcm::AssemblyContext pcmAssembly, pcm::ComposedProvidingRequiringEntity pcmComposite){
	action{
		call detectOrCreateCorrespondingAssemblyContextField(pcmAssembly, pcmComposite)
		call moveCorrespondingAssemblyContextField(pcmAssembly, pcmComposite)
	}
}

routine detectOrCreateCorrespondingAssemblyContextField(pcm::AssemblyContext pcmAssembly, pcm::ComposedProvidingRequiringEntity pcmComposite){
	match {
		val umlCompositeImplementation = retrieve uml::Class corresponding to pcmComposite tagged with TagLiterals.IPRE__IMPLEMENTATION
		val umlField = retrieve optional uml::Property corresponding to pcmAssembly tagged with TagLiterals.ASSEMBLY_CONTEXT__PROPERTY
		val umlComponentImplementation = retrieve optional uml::Class 
			corresponding to pcmAssembly.encapsulatedComponent__AssemblyContext tagged with TagLiterals.IPRE__IMPLEMENTATION
	}
	action{
		call {
			if (!umlField.isPresent){
				val Property umlFieldCandidate = umlCompositeImplementation.ownedAttributes.findFirst[it.type == umlComponentImplementation]
				if (umlFieldCandidate !== null){
					addCorrespondenceForExistingAssemblyContextField(pcmAssembly, umlFieldCandidate)
				}
				else {
					createCorrespondingAssemblyContextField(pcmAssembly, pcmComposite)
				}
			}
		}
	}
}

routine addCorrespondenceForExistingAssemblyContextField(pcm::AssemblyContext pcmAssembly, uml::Property umlField){
	match {
		require absence of uml::Property corresponding to pcmAssembly tagged with TagLiterals.ASSEMBLY_CONTEXT__PROPERTY
		require absence of pcm::AssemblyContext corresponding to umlField tagged with TagLiterals.ASSEMBLY_CONTEXT__PROPERTY
	}
	action{
		add correspondence between pcmAssembly and umlField tagged with TagLiterals.ASSEMBLY_CONTEXT__PROPERTY
	}
}

routine createCorrespondingAssemblyContextField(pcm::AssemblyContext pcmAssembly, pcm::ComposedProvidingRequiringEntity pcmComposite){
	match {
		val umlCompositeImplementation = retrieve uml::Class corresponding to pcmComposite tagged with TagLiterals.IPRE__IMPLEMENTATION
		require absence of uml::Property corresponding to pcmAssembly tagged with TagLiterals.ASSEMBLY_CONTEXT__PROPERTY
		val umlInnerComponent = retrieve optional uml::Class 
				corresponding to pcmAssembly.encapsulatedComponent__AssemblyContext tagged with TagLiterals.IPRE__IMPLEMENTATION
	}
	action{
		val umlField = create uml::Property and initialize {
			umlField.name = pcmAssembly.entityName
//			umlField.type = umlInnerComponent.orElse(null)
		}
		add correspondence between pcmAssembly and umlField tagged with TagLiterals.ASSEMBLY_CONTEXT__PROPERTY
		call changeTypeOfCorrespondingAssemblyContextField(pcmAssembly, pcmAssembly.encapsulatedComponent__AssemblyContext)
	}
}

routine moveCorrespondingAssemblyContextField(pcm::AssemblyContext pcmAssembly, pcm::ComposedProvidingRequiringEntity pcmComposite){
	match {
		val umlCompositeImplementation = retrieve uml::Class corresponding to pcmComposite tagged with TagLiterals.IPRE__IMPLEMENTATION
		val umlField = retrieve uml::Property corresponding to pcmAssembly tagged with TagLiterals.ASSEMBLY_CONTEXT__PROPERTY
	}
	action{
		update umlCompositeImplementation {
			umlCompositeImplementation.ownedAttributes += umlField
		}
	}
}

reaction AssemblyContextRemoved {
	after element pcm::AssemblyContext removed from pcm::ComposedProvidingRequiringEntity[assemblyContexts__ComposedStructure]
	with{!affectedEObject.assemblyContexts__ComposedStructure.contains(oldValue)}
	call removeCorrespondingAssemblyContextField(oldValue, affectedEObject)
}

routine removeCorrespondingAssemblyContextField(pcm::AssemblyContext pcmAssembly, pcm::ComposedProvidingRequiringEntity pcmComposite){
	match {
		val umlCompositeImplementation = retrieve uml::Class corresponding to pcmComposite tagged with TagLiterals.IPRE__IMPLEMENTATION
		val umlField = retrieve uml::Property corresponding to pcmAssembly tagged with TagLiterals.ASSEMBLY_CONTEXT__PROPERTY
	}
	action{
		update umlCompositeImplementation {
			umlCompositeImplementation.ownedAttributes -= umlField
		}
	}
}

reaction AssemblyContextDeleted{
	after element pcm::AssemblyContext deleted
	call deleteCorrespondingAssemblyContextField(affectedEObject)
}

routine deleteCorrespondingAssemblyContextField(pcm::AssemblyContext pcmAssembly){
	match {
		val umlField = retrieve uml::Property corresponding to pcmAssembly tagged with TagLiterals.ASSEMBLY_CONTEXT__PROPERTY
	}
	action{
		remove correspondence between pcmAssembly and umlField tagged with TagLiterals.ASSEMBLY_CONTEXT__PROPERTY
		delete umlField
	}
}

reaction AssemblyContextComponentChanged {
	after element pcm::RepositoryComponent replaced at pcm::AssemblyContext[encapsulatedComponent__AssemblyContext]
	with {affectedEObject.encapsulatedComponent__AssemblyContext === newValue}
	call changeTypeOfCorrespondingAssemblyContextField(affectedEObject, newValue)
}

routine changeTypeOfCorrespondingAssemblyContextField(pcm::AssemblyContext pcmAssembly, pcm::RepositoryComponent pcmComonent){
	match {
		val umlField = retrieve uml::Property corresponding to pcmAssembly tagged with TagLiterals.ASSEMBLY_CONTEXT__PROPERTY
		val umlComponentImplementation = retrieve optional uml::Class corresponding to pcmComonent tagged with TagLiterals.IPRE__IMPLEMENTATION
	}
	action{
		update umlField {
			umlField.type = umlComponentImplementation.orElse(null)
		}
	}
}








