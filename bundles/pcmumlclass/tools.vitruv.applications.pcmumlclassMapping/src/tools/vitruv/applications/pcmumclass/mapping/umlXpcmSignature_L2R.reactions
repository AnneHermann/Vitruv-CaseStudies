import java.util.List
import org.palladiosimulator.pcm.repository.OperationInterface
import org.eclipse.uml2.uml.Operation
import org.eclipse.xtext.xbase.lib.ObjectExtensions
import org.eclipse.uml2.uml.Parameter
import org.eclipse.xtext.xbase.lib.BooleanExtensions
import org.eclipse.uml2.uml.Interface
import org.palladiosimulator.pcm.repository.OperationSignature
import java.util.Optional

import "http://www.eclipse.org/uml2/5.0.0/UML" as uml
import "http://palladiosimulator.org/PalladioComponentModel/Repository/5.2" as repository
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

reactions: umlXpcmSignature_L2R in reaction to changes in UML
execute actions in PCM

import routines umlXpcmRoutines 

reaction OnSignatureInterfaceInsertedAsRoot {
	after element uml::Interface created
	call signature_ElementCreatedCheck(affectedEObject)
}

reaction OnSignatureInterfaceDeleted {
	after element uml::Interface deleted
	call signature_ElementDeletedCheck(affectedEObject)
}

reaction OnSignatureOperationInsertedInInterface {
	after element uml::Operation inserted in uml::Interface[ownedOperation]
	call signature_ElementCreatedCheck(affectedEObject)
}

reaction OnSignatureOperationRemovedFromInterface {
	after element uml::Operation removed from uml::Interface[ownedOperation]
	call signature_ElementDeletedCheck(affectedEObject)
}

reaction OnSignatureOperationDeleted {
	after element uml::Operation deleted
	call signature_ElementDeletedCheck(affectedEObject)
}

reaction OnSignatureParameterInsertedInOperation {
	after element uml::Parameter inserted in uml::BehavioralFeature[ownedParameter]
	call signature_ElementCreatedCheck(affectedEObject)
}

reaction OnSignatureParameterRemovedFromOperation {
	after element uml::Parameter removed from uml::BehavioralFeature[ownedParameter]
	call signature_ElementDeletedCheck(affectedEObject)
}

reaction OnSignatureParameterDeleted {
	after element uml::Parameter deleted
	call signature_ElementDeletedCheck(affectedEObject)
}

reaction OnSignatureNameReplacedAtParameter {
	after attribute replaced at uml::Parameter[name]
	call signature_ElementUpdatedCheck(affectedEObject)
}

reaction OnSignatureNameReplacedAtOperationBidirectional {
	after attribute replaced at uml::Operation[name]
	call signature_BidirectionalCheck(affectedEObject)
}

routine updateOperationSignatureName(uml::Operation operation, uml::Parameter returnParameter , uml::Interface interface_) {
	action {
		execute {
		}
	}
}

routine updateOperationSignatureReturnType(uml::Operation operation, uml::Parameter returnParameter , uml::Interface interface_) {
	action {
		execute {
		}
	}
}

routine signature_BidirectionalUpdate(uml::Operation operation_, uml::Parameter returnParameter_ , uml::Interface interface_) {
	action {
		call updateOperationSignatureName(operation_, returnParameter_ , interface_)
		call updateOperationSignatureReturnType(operation_, returnParameter_ , interface_)
	}
}

routine signature_CreateMapping(uml::Operation operation_, uml::Parameter returnParameter_ , uml::Interface interface_) {
	match {
		require absence of repository::OperationSignature corresponding to operation_ tagged with "umlXpcmSignature_map_UML_and_PCM_correspondence_Operation:operation_with_OperationSignature:operationSignature"
		require absence of repository::OperationInterface corresponding to operation_ tagged with "umlXpcmSignature_map_UML_and_PCM_correspondence_Operation:operation_with_OperationInterface:operationInterface"
		val operationInterface_ = retrieve repository::OperationInterface corresponding to interface_ tagged with "umlXpcmInterface_map_UML_and_PCM_correspondence_Interface:interface_with_OperationInterface:operationInterface"
	}
	action {
		val operationSignature_ = create repository::OperationSignature
		add correspondence between operationSignature_ and operation_ tagged with "umlXpcmSignature_map_UML_and_PCM_correspondence_Operation:operation_with_OperationSignature:operationSignature"
		add correspondence between operationInterface_ and operation_ tagged with "umlXpcmSignature_map_UML_and_PCM_correspondence_Operation:operation_with_OperationInterface:operationInterface"
		add correspondence between operationSignature_ and returnParameter_ tagged with "umlXpcmSignature_map_UML_and_PCM_correspondence_Parameter:returnParameter_with_OperationSignature:operationSignature"
		add correspondence between operationInterface_ and returnParameter_ tagged with "umlXpcmSignature_map_UML_and_PCM_correspondence_Parameter:returnParameter_with_OperationInterface:operationInterface"
		add correspondence between operationSignature_ and interface_ tagged with "umlXpcmSignature_map_UML_and_PCM_correspondence_Interface:interface_with_OperationSignature:operationSignature"
		add correspondence between operationInterface_ and interface_ tagged with "umlXpcmSignature_map_UML_and_PCM_correspondence_Interface:interface_with_OperationInterface:operationInterface"
		execute {
			operationInterface_.getSignatures__OperationInterface().^add(operationSignature_)
		}
		call signature_BidirectionalUpdate(operation_, returnParameter_ , interface_)
	}
}

routine signature_DeleteMapping(repository::OperationSignature operationSignature_, repository::OperationInterface operationInterface_) {
	action {
		delete operationSignature_
	}
}

routine signature_BidirectionalCheck(ecore::EObject affectedEObject) {
	action {
		call {
			if ( affectedEObject instanceof Operation ) { var Operation operation_ = affectedEObject for ( returnParameter__candidate : operation_ . ownedParameters ) { if ( returnParameter__candidate !== null && returnParameter__candidate instanceof Parameter ) { var Parameter returnParameter_ = returnParameter__candidate as Parameter if ( "returnParam" === returnParameter_ . getName ( ) ) { var interface__candidate = operation_ . eContainer { if ( interface__candidate !== null && interface__candidate instanceof Interface ) { var Interface interface_ = interface__candidate as Interface { signature_BidirectionalUpdate ( operation_ , returnParameter_ , interface_ ) return } } } } } } }
			if ( affectedEObject instanceof Parameter ) { var Parameter returnParameter_ = affectedEObject if ( "returnParam" === returnParameter_ . getName ( ) ) { var operation__candidate = returnParameter_ . eContainer { if ( operation__candidate !== null && operation__candidate instanceof Operation ) { var Operation operation_ = operation__candidate as Operation { var interface__candidate = operation_ . eContainer { if ( interface__candidate !== null && interface__candidate instanceof Interface ) { var Interface interface_ = interface__candidate as Interface { signature_BidirectionalUpdate ( operation_ , returnParameter_ , interface_ ) return } } } } } } } }
			if ( affectedEObject instanceof Interface ) { var Interface interface_ = affectedEObject for ( operation__candidate : interface_ . ownedOperations ) { if ( operation__candidate !== null && operation__candidate instanceof Operation ) { var Operation operation_ = operation__candidate as Operation for ( returnParameter__candidate : operation_ . ownedParameters ) { if ( returnParameter__candidate !== null && returnParameter__candidate instanceof Parameter ) { var Parameter returnParameter_ = returnParameter__candidate as Parameter if ( "returnParam" === returnParameter_ . getName ( ) ) { signature_BidirectionalUpdate ( operation_ , returnParameter_ , interface_ ) return } } } } } }
		}
	}
}

routine signature_ElementCreatedCheck(ecore::EObject affectedEObject) {
	action {
		call {
			if ( affectedEObject instanceof Operation ) { var Operation operation_ = affectedEObject for ( returnParameter__candidate : operation_ . ownedParameters ) { if ( returnParameter__candidate !== null && returnParameter__candidate instanceof Parameter ) { var Parameter returnParameter_ = returnParameter__candidate as Parameter if ( "returnParam" === returnParameter_ . getName ( ) ) { var interface__candidate = operation_ . eContainer { if ( interface__candidate !== null && interface__candidate instanceof Interface ) { var Interface interface_ = interface__candidate as Interface { signature_CreateMapping ( operation_ , returnParameter_ , interface_ ) return } } } } } } }
			if ( affectedEObject instanceof Parameter ) { var Parameter returnParameter_ = affectedEObject if ( "returnParam" === returnParameter_ . getName ( ) ) { var operation__candidate = returnParameter_ . eContainer { if ( operation__candidate !== null && operation__candidate instanceof Operation ) { var Operation operation_ = operation__candidate as Operation { var interface__candidate = operation_ . eContainer { if ( interface__candidate !== null && interface__candidate instanceof Interface ) { var Interface interface_ = interface__candidate as Interface { signature_CreateMapping ( operation_ , returnParameter_ , interface_ ) return } } } } } } } }
			if ( affectedEObject instanceof Interface ) { var Interface interface_ = affectedEObject for ( operation__candidate : interface_ . ownedOperations ) { if ( operation__candidate !== null && operation__candidate instanceof Operation ) { var Operation operation_ = operation__candidate as Operation for ( returnParameter__candidate : operation_ . ownedParameters ) { if ( returnParameter__candidate !== null && returnParameter__candidate instanceof Parameter ) { var Parameter returnParameter_ = returnParameter__candidate as Parameter if ( "returnParam" === returnParameter_ . getName ( ) ) { signature_CreateMapping ( operation_ , returnParameter_ , interface_ ) return } } } } } }
		}
	}
}

routine signature_ElementDeletedCheck(ecore::EObject affectedEObject) {
	match {
		val operationSignature_correspondingTo_operation = retrieve optional repository::OperationSignature corresponding to affectedEObject tagged with "umlXpcmSignature_map_UML_and_PCM_correspondence_Operation:operation_with_OperationSignature:operationSignature"
		val operationInterface_correspondingTo_operation = retrieve optional repository::OperationInterface corresponding to affectedEObject tagged with "umlXpcmSignature_map_UML_and_PCM_correspondence_Operation:operation_with_OperationInterface:operationInterface"
		val operationSignature_correspondingTo_returnParameter = retrieve optional repository::OperationSignature corresponding to affectedEObject tagged with "umlXpcmSignature_map_UML_and_PCM_correspondence_Parameter:returnParameter_with_OperationSignature:operationSignature"
		val operationInterface_correspondingTo_returnParameter = retrieve optional repository::OperationInterface corresponding to affectedEObject tagged with "umlXpcmSignature_map_UML_and_PCM_correspondence_Parameter:returnParameter_with_OperationInterface:operationInterface"
		val operationSignature_correspondingTo_interface = retrieve optional repository::OperationSignature corresponding to affectedEObject tagged with "umlXpcmSignature_map_UML_and_PCM_correspondence_Interface:interface_with_OperationSignature:operationSignature"
		val operationInterface_correspondingTo_interface = retrieve optional repository::OperationInterface corresponding to affectedEObject tagged with "umlXpcmSignature_map_UML_and_PCM_correspondence_Interface:interface_with_OperationInterface:operationInterface"
	}
	action {
		call {
			var OperationSignature operationSignature_
			var OperationInterface operationInterface_
			if ( operationSignature_correspondingTo_operation . isPresent ( ) ) operationSignature_ = operationSignature_correspondingTo_operation . get ( )
			if ( operationInterface_correspondingTo_operation . isPresent ( ) ) operationInterface_ = operationInterface_correspondingTo_operation . get ( )
			if ( operationSignature_correspondingTo_returnParameter . isPresent ( ) ) operationSignature_ = operationSignature_correspondingTo_returnParameter . get ( )
			if ( operationInterface_correspondingTo_returnParameter . isPresent ( ) ) operationInterface_ = operationInterface_correspondingTo_returnParameter . get ( )
			if ( operationSignature_correspondingTo_interface . isPresent ( ) ) operationSignature_ = operationSignature_correspondingTo_interface . get ( )
			if ( operationInterface_correspondingTo_interface . isPresent ( ) ) operationInterface_ = operationInterface_correspondingTo_interface . get ( )
			if ( operationSignature_ !== null && operationInterface_ !== null ) signature_DeleteMapping ( operationSignature_ , operationInterface_ )
		}
	}
}

routine signature_ElementUpdatedCheck(ecore::EObject affectedEObject) {
	action {
		call {
			if ( affectedEObject instanceof Operation ) { var Operation operation_ = affectedEObject for ( returnParameter__candidate : operation_ . ownedParameters ) { if ( returnParameter__candidate !== null && returnParameter__candidate instanceof Parameter ) { var Parameter returnParameter_ = returnParameter__candidate as Parameter if ( "returnParam" === returnParameter_ . getName ( ) ) { var interface__candidate = operation_ . eContainer { if ( interface__candidate !== null && interface__candidate instanceof Interface ) { var Interface interface_ = interface__candidate as Interface { signature_CreateMapping ( operation_ , returnParameter_ , interface_ ) return } } } } } } }
			if ( affectedEObject instanceof Parameter ) { var Parameter returnParameter_ = affectedEObject if ( "returnParam" === returnParameter_ . getName ( ) ) { var operation__candidate = returnParameter_ . eContainer { if ( operation__candidate !== null && operation__candidate instanceof Operation ) { var Operation operation_ = operation__candidate as Operation { var interface__candidate = operation_ . eContainer { if ( interface__candidate !== null && interface__candidate instanceof Interface ) { var Interface interface_ = interface__candidate as Interface { signature_CreateMapping ( operation_ , returnParameter_ , interface_ ) return } } } } } } } }
			if ( affectedEObject instanceof Interface ) { var Interface interface_ = affectedEObject for ( operation__candidate : interface_ . ownedOperations ) { if ( operation__candidate !== null && operation__candidate instanceof Operation ) { var Operation operation_ = operation__candidate as Operation for ( returnParameter__candidate : operation_ . ownedParameters ) { if ( returnParameter__candidate !== null && returnParameter__candidate instanceof Parameter ) { var Parameter returnParameter_ = returnParameter__candidate as Parameter if ( "returnParam" === returnParameter_ . getName ( ) ) { signature_CreateMapping ( operation_ , returnParameter_ , interface_ ) return } } } } } }
			signature_ElementDeletedCheck(affectedEObject)
		}
	}
}